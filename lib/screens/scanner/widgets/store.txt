import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:fluttertoast/fluttertoast.dart';

import 'package:intl/intl.dart';
import 'package:scanner/local_service/local_service.dart';
import 'package:scanner/model/members_model.dart';

import '../../../config/app_text.dart';
import '../../../config/functions.dart';
import '../../../config/palette.dart';
import '../../../model/DeviceModel.dart';
import '../../../model/agent_model.dart';
import '../../../model/user.dart';
import '../../../model/visite_model.dart';
import '../../../remote_service/remote_service.dart';
import '../../../widgets/all_sheet_header.dart';
import '../../../widgets/custom_button.dart';
import 'infos_column.dart';
import 'sheet_header.dart';

class SheetContainer extends StatefulWidget {
  ///::::::::::::::::::::::::::::::::::::::::::
  ///Traitement de la visite

  final VisiteModel visite;
  final AgentModel agent;
  ////////:::::::::::::////////////////
  const SheetContainer({super.key, required this.visite, required this.agent});

  @override
  State<SheetContainer> createState() => _SheetContainerState();
}

class _SheetContainerState extends State<SheetContainer> {
  ////////////////
  ///nous permet d'afficher un gift de chargement
  ///mais je ne suis pas sûr de cette de methode
  ///a changer plutard
  bool isLoading = true;
  String _idCardType = '';
  String _membersIdCardType = '';

  ///////////////////
  final TextEditingController iDController = TextEditingController();
  final TextEditingController cariDController = TextEditingController();
  final TextEditingController cariDController2 = TextEditingController();
  final TextEditingController _badgeController = TextEditingController();
  final TextEditingController _giletController = TextEditingController();
  final TextEditingController _membersGiletController = TextEditingController();
  final TextEditingController _membersBadgeController = TextEditingController();
  /////////////////////
  ///
  String alertCarIDValue = '';

  /////////////////////////////////////////////////
  ///
  @override
  void initState() {
    iDController.text = widget.visite.numeroCni;
    cariDController.text = widget.visite.plaqueVehicule;
    _idCardType = widget.visite.typePiece;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    ////////////////:
    ///text fields
    final Widget badgeTextField = TextField(
      controller: _badgeController,
      style: const TextStyle(
        color: Colors.black,
        fontSize: 14,
        fontWeight: FontWeight.w600,
      ),
      cursorColor: Colors.black,
      decoration: InputDecoration(
        border: InputBorder.none,
      ),
    );
    /////////////////
    ///text fields
    final Widget idTextField = TextField(
      controller: iDController,
      style: const TextStyle(
        color: Colors.black,
        fontSize: 14,
        fontWeight: FontWeight.w600,
      ),
      cursorColor: Colors.black,
      decoration: InputDecoration(
        border: InputBorder.none,
      ),
    );
    ////////////////////////
    ///
    ///
    final Widget cardIddTextField = TextField(
      controller: cariDController,
      style: const TextStyle(
        color: Colors.black,
        fontSize: 14,
        fontWeight: FontWeight.w600,
      ),
      cursorColor: Colors.black,
      decoration: InputDecoration(
        border: InputBorder.none,
      ),
    );

    // utilise dans code
    final size = MediaQuery.of(context).size;

    return Scaffold(
      backgroundColor: Colors.transparent,
      resizeToAvoidBottomInset: true,
      body: Container(
        margin: EdgeInsets.only(top: size.height - (size.height / 1.1)),
        height: size.height / 1.1,
        width: double.infinity,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(15),
            topRight: Radius.circular(15),
          ),
        ),
        child: Column(
          children: [
            const AllSheetHeader(),
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    SheetHeader(visite: widget.visite),
                    Padding(
                      padding: const EdgeInsets.all(10),
                      child: getWidget(
                        visite: widget.visite,
                        idTextField: idTextField,
                        cardIddTextField: cardIddTextField,
                        badgeTextField: badgeTextField,
                      ),
                    ),
                  ],
                ),
              ),
            )
          ],
        ),
      ),
    );
  }

  ///
  ///////////////////////////////////////////////////////////////////

// widget retourné si un qr code a deja été scané
  Widget isAlreadyScanWidget({
    required VisiteModel visite,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const SizedBox(
          height: 15,
        ),
        Row(
          children: [
            Expanded(
              child: InfosColumn(
                label: 'Date',
                widget: Expanded(
                  child: AppText.medium(
                    DateFormat(
                      'EE dd MMM yyyy',
                      'fr_FR',
                    ).format(
                      DateTime.now(),
                    ),
                    textOverflow: TextOverflow.fade,
                  ),
                ),
              ),
            ),
            Expanded(
              child: InfosColumn(
                label: 'Heure',
                widget: AppText.medium(
                  DateFormat('HH:mm').format(
                    DateTime.now(),
                  ),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(
          height: 20,
        ),
        SizedBox(
          width: double.infinity,
          child: AppText.medium(
            'Attention',
            textAlign: TextAlign.center,
          ),
        ),
        AppText.small(
          "Rassurez-vous que le visiteur a bien reçu ses accessoires de visite (badge et/ou gilet) s'il s'agit d'une entrée ou s'il les a rendus s'il s'agit d'une sortie.",
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 10),
        Row(
          children: [
            Expanded(
              child: InfosColumn(
                opacity: 0.12,
                label: 'Entrer le n° du badge',
                widget: Expanded(
                  child: Functions.getTextField(
                    controller: _badgeController,
                  ),
                ),
              ),
            ),
            const SizedBox(width: 5),
            Expanded(
              child: InfosColumn(
                opacity: 0.12,
                label: 'Entrer le n° du gilet',
                widget: Expanded(
                  child: Functions.getTextField(
                    controller: _giletController,
                  ),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 20),
        if (visite.members.isNotEmpty)
          AppText.medium(
            'Personnes associées à la visite (${visite.members.length})',
            fontSize: 16,
            fontWeight: FontWeight.w400,
          ),
        if (visite.members.isNotEmpty)
          _showMemberRow(
            members: visite.members,
          ),
        const SizedBox(height: 10),
        CustomButton(
          color: Palette.primaryColor,
          width: double.infinity,
          height: 35,
          radius: 5,
          text: 'Entrée ?',
          onPress: () {
            /////////////// on cree une instance de scanHistoryModel  //////////
            /// de motif: "Entrée"///
            ///
            String hours = DateFormat('HH:mm', 'fr_FR').format(
              DateTime.now(),
            );

            /*  setState(() {
              cariDController2.text = visite.plaqueVehicule;
            }); */
            /////////////////////////////////////////////////
            /// on affiche une alerte modale pour la
            /// confirmation
            Functions.IsAllRedyScanalert(
              carIdField: getTextfiel(
                controller: cariDController2,
                //hintext: user.plaqueVehicule,
              ),
              ctxt: context,
              visite: visite,
              confirm: () {
                ////////////
                ///scan_history
                Map<String, dynamic> scanHistoryData = {
                  "visite_id": visite.id,
                  "user_id": widget.agent.id,
                  "scan_date": DateTime.now().toIso8601String(),
                  "scan_hour": hours,
                  "motif": "Entrée",
                  "numero_badge": _badgeController.text,
                  "numero_gilet": _giletController.text,
                  "plaque_immatriculation": cariDController2.text,
                };
                upDateScanHistory(
                  // carID: cariDController2.text,
                  scanHistoryData: scanHistoryData,
                );
              },
              cancel: () => Navigator.pop(
                  context), // sinon Navigator.pop(context) si c'est annuler
            );
            /* _showDialog(ctxt: context, textField: [
              DialogTextField(
                validator: (value) {
                  if (value != null) {
                    print(value);
                    alertCarIDValue = value;
                  }
                  print('------- $alertCarIDValue');
                  return;
                },
              )
            ]); */
          },
        ),
        const SizedBox(
          height: 15,
        ),
        CustomButton(
          textColor: Palette.secondaryColor,
          color: Palette.secondaryColor.withOpacity(0.05),
          width: double.infinity,
          height: 35,
          radius: 5,
          text: 'Sortie ?',
          onPress: () {
            /////////////// on cree une instance de scanHistoryModel  //////////
            /// de motif: "Sortie"///
            ///
            String hours = DateFormat('HH:mm', 'fr_FR').format(
              DateTime.now(),
            );

            Map<String, dynamic> scanHistoryData = {
              "visite_id": visite.id,
              "user_id": widget.agent.id,
              "scan_date": DateTime.now().toIso8601String(),
              "scan_hour": hours,
              "motif": "Sortie",
              "numero_badge": _badgeController.text,
              "numero_gilet": _giletController.text,
              "plaque_immatriculation": cariDController2.text,
            };

            /////////////////////////////////////////////////
            /// on affiche une alerte modale pour la
            /// confirmation
            Functions.IsAllRedyScanalert(
              carIdField: getTextfiel(
                controller: cariDController2,
                // hintext: user.plaqueVehicule,
              ),
              ctxt: context,
              isEntree: false,
              visite: visite,
              confirm: () => upDateScanHistory(
                // on appel upDateScanHistory() si c'est confirmé
                // carID: cariDController2.text,
                scanHistoryData: scanHistoryData,
                isEntree: false,
              ),
              cancel: () => Navigator.pop(
                  context), // sinon Navigator.pop(context) si c'est annuler
            );
          },
        ),
        const SizedBox(
          height: 10,
        ),
      ],
    );
  }

  Widget _showMemberRow({required List<Member> members}) =>
      SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Row(
          children: members.map((member) {
            return Container(
              width: MediaQuery.of(context).size.width - 45,
              margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
              padding: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(5),
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.3),
                    blurRadius: 5,
                    offset: const Offset(0, 3), // changes position of shadow
                  ),
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.3),
                    blurRadius: 5,
                    offset: const Offset(0, 3), // changes position of shadow
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: InfosColumn(
                          label: 'Nom',
                          widget: AppText.medium(member.nom),
                        ),
                      ),
                      Expanded(
                        child: InfosColumn(
                          label: 'Prénoms',
                          widget: AppText.medium(member.prenoms),
                        ),
                      )
                    ],
                  ),
                  Row(
                    children: [
                      Expanded(
                          child: InfosColumn(
                        label: 'N° de la pièce',
                        widget: AppText.medium(member.idCard),
                      )),
                      Expanded(
                          child: InfosColumn(
                        label: 'type de pièce',
                        widget: AppText.medium(member.typePiece),
                      ))
                    ],
                  )
                ],
              ),
            );
          }).toList(),
        ),
      );

  //Alert de sortie définitive
  Future<Null> alert1({
    required BuildContext ctxt,
    required Function() confirm,
    required Function() cancel,
    required User user,
  }) async {
    return showDialog(
        barrierDismissible: false,
        context: ctxt,
        builder: (BuildContext ctxt) {
          return AlertDialog(
            backgroundColor: Colors.white,
            title: AppText.medium('Confirmation'),
            content: AppText.small(
              'Attention, cette action entraînera la désactivation du QR code et du code associé.',
              textAlign: TextAlign.left,
            ),
            contentPadding: const EdgeInsets.only(
              top: 5.0,
              right: 15.0,
              left: 15.0,
            ),
            titlePadding: const EdgeInsets.only(
              top: 10,
              left: 15,
            ),
            actions: [
              TextButton(
                onPressed: confirm,
                child: AppText.small(
                  'Confirmer',
                  fontWeight: FontWeight.w500,
                  color: Palette.primaryColor,
                ),
              ),
              TextButton(
                onPressed: cancel,
                child: AppText.small(
                  'Annuler',
                  fontWeight: FontWeight.w500,
                  color: Palette.primaryColor,
                ),
              )
            ],
          );
        });
  }

//affiche un alerte dialogue de confirmation en cas de modification
  Future<Null> alert({
    required BuildContext ctxt,
    bool isEntree = true,
    required Function() confirm,
    required Function() cancel,
    required VisiteModel visite,
  }) async {
    return showDialog(
      barrierDismissible: false,
      context: ctxt,
      builder: (BuildContext context) {
        if (Platform.isIOS) {
          return CupertinoAlertDialog(
            title: Text('Confirmation'),
            content: Text(
              isEntree
                  ? 'Enregistrer une entrée pour ${visite.nom} ${visite.prenoms} ?'
                  : 'Enregistrer une sortie pour ${visite.nom} ${visite.prenoms} ?',
              textAlign: TextAlign.left,
            ),
            actions: [
              CupertinoDialogAction(
                onPressed: cancel,
                child: Text(
                  'Annuler',
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    color: CupertinoColors.destructiveRed,
                  ),
                ),
              ),
              CupertinoDialogAction(
                onPressed: confirm,
                child: Text(
                  'Confirmer',
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    color: CupertinoColors.activeBlue,
                  ),
                ),
              ),
            ],
          );
        } else {
          return AlertDialog(
            backgroundColor: Colors.white,
            title: Text('Confirmation'),
            content: Text(
              isEntree
                  ? 'Enregistrer une entrée pour ${visite.nom} ${visite.prenoms} ?'
                  : 'Enregistrer une sortie pour ${visite.nom} ${visite.prenoms} ?',
              textAlign: TextAlign.left,
            ),
            contentPadding: const EdgeInsets.only(
              top: 5.0,
              right: 15.0,
              left: 15.0,
            ),
            titlePadding: const EdgeInsets.only(
              top: 10,
              left: 15,
            ),
            actions: [
              TextButton(
                onPressed: cancel,
                child: Text(
                  'Annuler',
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    color: const Color.fromARGB(255, 198, 51, 41),
                  ),
                ),
              ),
              TextButton(
                onPressed: confirm,
                child: Text(
                  'Confirmer',
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    color: Palette.primaryColor,
                  ),
                ),
              ),
            ],
          );
        }
      },
    );
  }

/* l'alert dialog afficher lorsque qr code à déjà été scanné */
////////////////

//met a jour l'historique des scans de l'api
  Future<void> upDateScanHistory({
    //required String carID,
    bool isEntree = true,
    required Map<String, dynamic> scanHistoryData,
  }) async {
    Navigator.pop(context);
    EasyLoading.show();
    // print(scanHistoryData);
    //Functions.showLoadingSheet(ctxt: context);
    ///////////////////////////////////
    /// update via APIs here
    await RemoteService()
        .postData(
      endpoint: 'scanCounters',
      postData: scanHistoryData,
    )
        .whenComplete(() {
      EasyLoading.dismiss();
      Navigator.pop(context);

      Functions.showToast(
        msg: isEntree ? 'Entrée enregistrée !' : 'Sortie enregistrée !',
      );
    });
  }

// widget retourné si un qr code est scané pour la premiere fois
  Widget firstScanWidget({
    required Widget idTextField,
    required Widget cardIddTextField,
    required Widget badgeTextField,
    required VisiteModel visite,
  }) {
    DateTime today = DateTime(
      DateTime.now().year,
      DateTime.now().month,
      DateTime.now().day,
    );
    String hours = DateFormat('HH:mm').format(DateTime.now());
    final PageController _pageController = PageController();
    final TextEditingController idCardController = TextEditingController();
    //int firstIndex = 0;
    if (visite.members.isEmpty)
      return Column(
        children: [
          Row(
            children: [
              Expanded(
                child: InfosColumn(
                  label: 'Date début',
                  widget: AppText.medium(
                    DateFormat(
                      'dd MMM yyyy',
                      'fr_FR',
                    ).format(
                      visite.dateVisite,
                    ),
                  ),
                ),
              ),
              Expanded(
                child: InfosColumn(
                  label: 'Heure d\'entrée',
                  widget: AppText.medium(
                    visite.heureVisite ?? '',
                  ),
                ),
              ),
            ],
          ), //

          Row(
            children: [
              Expanded(
                child: InfosColumn(
                  radius: 0,
                  opacity: 0.12,
                  label: 'n° de pièce',
                  widget: Expanded(
                    child: idTextField,
                  ),
                ),
              ),
              Expanded(
                child: InfosColumn(
                  radius: 0,
                  opacity: 0.12,
                  label: 'Type de pièce',
                  widget: Expanded(
                    child: InkWell(
                      onTap: () => Functions.showBottomSheet(
                        ctxt: context,
                        widget: _idCardTypeSelector(),
                      ),
                      child: Row(
                        children: [
                          Expanded(child: AppText.medium(_idCardType)),
                          Icon(Icons.arrow_drop_down)
                        ],
                      ),
                    ),
                  ),
                ),
              ),
              Expanded(
                child: InfosColumn(
                  radius: 0,
                  opacity: 0.12,
                  label: 'n° d\'immatriculation véhicule',
                  widget: Expanded(
                    child: cardIddTextField,
                  ),
                ),
              ),
            ],
          ),
          //
          Container(
            width: double.infinity,
            height: 0.8,
            color: Palette.separatorColor,
          ),
          const SizedBox(
            height: 10,
          ),
          AppText.medium(
            'Accessoires de visite',
            textAlign: TextAlign.center,
          ),
          AppText.small(
            textAlign: TextAlign.center,
            'Veuillez fournir au visiteur les accessoires de visite (badge et gilet) si necessaire',
          ),
          const SizedBox(
            height: 5,
          ),

          Row(
            children: [
              Expanded(
                child: InfosColumn(
                  radius: 0,
                  opacity: 0.12,
                  label: 'Entrer le n° du badge',
                  widget: Expanded(
                    child: badgeTextField,
                  ),
                ),
              ),
            ],
          ),

          Row(
            children: [
              Expanded(
                child: InfosColumn(
                  radius: 0,
                  opacity: 0.12,
                  label: 'Entrer le n° du gilet',
                  widget: Expanded(
                    child: Functions.getTextField(controller: _giletController),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(
            height: 40,
          ),

          ///
          CustomButton(
            color: Palette.primaryColor,
            width: double.infinity,
            height: 35,
            radius: 5,
            text: 'Sauvegarder le scan',
            //////////////////////////////////////////////////
            ///on a besoin update le n° CNI et le n° d'immatricule du user
            ///anisi l'attribut iSAlreadyScanned du qr code qu'on vient de scanné
            onPress: () async {
              LocalService localService = LocalService();
              DeviceModel? _device = await localService.getDevice();
              if (_device == null) {
                Functions.showToast(
                  msg: 'Une erreur s\'est produite',
                  gravity: ToastGravity.TOP,
                );
                return;
              }
              if (_device.localisationId != visite.localisation.id) {
                Functions.showToast(
                  msg: 'Cette visite n\'a pas lieu ici !',
                  gravity: ToastGravity.TOP,
                );
                return;
              }
              if (iDController.text.isEmpty) {
                Functions.showToast(
                  msg: 'Le n° de pièce d\'identité est obligatoire !',
                  gravity: ToastGravity.TOP,
                );
                return;
              }

              ////////////////////////////////////////////////////////////
              //préparation des données pour update les tables visiteurs et scan_history
              ///
              ///PUT VISITE DATA
              Map<String, dynamic> visitData = {
                "is_already_scanned": 1,
                "numero_piece": iDController.text.toUpperCase(),
                "heure_visite": hours,
                "type_piece": _idCardType,
                //"numero_piece": iDController.text.toUpperCase(),
              };
              /////////////////////////
              ///

              ////////////
              ///SCAN HISTORY DATA
              Map<String, dynamic> scanHistoryData = {
                "visite_id": visite.id,
                "user_id": widget.agent.id,
                "scan_date": today.toIso8601String(),
                "scan_hour": hours,
                "motif": "Entrée",
                "numero_badge": _badgeController.text.toUpperCase(),
                "numero_gilet": _giletController.text.toUpperCase(),
                "plaque_immatriculation": cariDController.text.toUpperCase(),
              };

              alert(
                ctxt: context,
                visite: visite,
                confirm: () async {
                  // Functions.showLoadingSheet(ctxt: context);
                  EasyLoading.show(status: 'sauvegarde en cours...');
                  await Functions.upDateVisit(
                    data: visitData,
                    visiteId: visite.id,
                  ).whenComplete(() async {
                    await RemoteService()
                        .postData(
                      endpoint: 'scanCounters',
                      postData: scanHistoryData,
                    )
                        .then((res) {
                      //visite.plaqueVehicule = cariDController.text;

                      Future.delayed(const Duration(seconds: 2)).then(
                        (_) {
                          widget.visite.isAlreadyScanned = true;
                          widget.visite.numeroCni = iDController.text;
                          EasyLoading.dismiss();
                          Navigator.pop(context);
                          Navigator.pop(context);
                          Functions.showToast(
                            msg: 'Scan sauvegardé !',
                            gravity: ToastGravity.TOP,
                          );
                        },
                      );
                    });
                  });
                },
                cancel: () => Navigator.pop(context),
              );
            },
          ),
          const SizedBox(
            height: 10,
          ),
          CustomButton(
            color: Palette.secondaryColor,
            width: double.infinity,
            height: 35,
            radius: 5,
            text: 'Annuler',
            onPress: () {
              Navigator.pop(context);
            },
          ),
        ],
      );
    else
      return Container(
        width: double.infinity,
        height: MediaQuery.of(context).size.height * 0.55,
        child: Column(
          children: [
            Expanded(
              child: PageView.builder(
                controller: _pageController,
                physics: NeverScrollableScrollPhysics(),
                itemCount:
                    visite.members.length + 1, // +1 for the primary visitor
                itemBuilder: (context, index) {
                  if (index == 0) {
                    // First page for the primary visitor
                    return _primaryVisitorInfos(
                      visite,
                      idTextField,
                      cardIddTextField,
                      badgeTextField,
                    );
                  } else {
                    // Pages for members
                    final member = visite.members[index - 1];
                    idCardController.text = member.idCard;
                    _membersBadgeController.text = member.badge;
                    _membersGiletController.text = member.gilet;
                    _membersIdCardType = member.typePiece;

                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        AppText.medium(
                          'Personnes associées à la visite (${visite.members.length})',
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                        ),
                        const SizedBox(height: 15),
                        AppText.medium(
                          'Nom & Prénoms',
                          fontWeight: FontWeight.w400,
                        ),
                        const SizedBox(height: 5),
                        Row(
                          children: [
                            Expanded(
                              child: InfosColumn(
                                opacity: 0.12,
                                label: 'Nom',
                                widget: AppText.medium(member.nom),
                              ),
                            ),
                            const SizedBox(width: 5),
                            Expanded(
                              child: InfosColumn(
                                opacity: 0.12,
                                label: 'Prénoms',
                                widget: AppText.medium(member.prenoms),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 15),
                        AppText.medium(
                          'Numéro de pièce et accessoires de visite',
                          fontWeight: FontWeight.w400,
                        ),
                        const SizedBox(height: 5),
                        Row(
                          children: [
                            Expanded(
                              child: InfosColumn(
                                opacity: 0.12,
                                label: 'Entrer le n° CNI',
                                widget: Expanded(
                                  child: Functions.getTextField(
                                    controller: idCardController,
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 5),
                            Expanded(
                              child: InfosColumn(
                                opacity: 0.12,
                                label: 'type de pièce',
                                widget: InkWell(
                                  onTap: () => Functions.showBottomSheet(
                                    ctxt: context,
                                    widget: _membersIdCardTypeSelector(),
                                  ),
                                  child: Row(
                                    children: [
                                      Expanded(
                                        child:
                                            AppText.medium(_membersIdCardType),
                                      ),
                                      Icon(Icons.arrow_drop_down),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 5),
                        Row(
                          children: [
                            Expanded(
                              child: InfosColumn(
                                opacity: 0.12,
                                label: 'Entrer le n° badge ',
                                widget: Expanded(
                                  child: Functions.getTextField(
                                    controller: _membersBadgeController,
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 5),
                            Expanded(
                              child: InfosColumn(
                                opacity: 0.12,
                                label: 'Entrer le n° gilet ',
                                widget: Expanded(
                                  child: Functions.getTextField(
                                    controller: _membersGiletController,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        )
                      ],
                    );
                  }
                },
              ),
            ),

            // suivant && précédent
            Row(
              children: [
                Expanded(
                  child: CustomButton(
                    color: Palette.secondaryColor,
                    width: double.infinity,
                    height: 35,
                    radius: 5,
                    text: 'Précédent',
                    onPress: () {
                      if (_pageController.page! > 0) {
                        _pageController.previousPage(
                          duration: const Duration(milliseconds: 800),
                          curve: Curves.easeInOut,
                        );
                      }
                    },
                  ),
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: CustomButton(
                    color: Palette.primaryColor,
                    width: double.infinity,
                    height: 35,
                    radius: 5,
                    text: 'Suivant',
                    onPress: () async {
                      LocalService localService = LocalService();
                      DeviceModel? _device = await localService.getDevice();
                      if (_device == null) {
                        Functions.showToast(
                          msg: 'Une erreur s\'est produite',
                          gravity: ToastGravity.TOP,
                        );
                        return;
                      }
                      if (_device.localisationId != visite.localisation.id) {
                        Functions.showToast(
                          msg: 'Cette visite n\'a pas lieu ici !',
                          gravity: ToastGravity.TOP,
                        );
                        return;
                      }
                      final currentPage = _pageController.page!.toInt();
                      // print(currentPage);

                      // Si on est sur la première page (page du visiteur principal)
                      if (currentPage == 0) {
                        if (iDController.text.isEmpty) {
                          // Si le champ iDController est vide, afficher un message d'erreur
                          Functions.showToast(
                            msg:
                                'Le n° de pièce d\'identité est obligatoire pour le visiteur principal !',
                            gravity: ToastGravity.TOP,
                          );
                          return;
                        } else if (_badgeController.text.trim().isEmpty) {
                          Functions.showToast(
                            msg:
                                'Le n° de badge  est obligatoire pour le visiteur principal !',
                            gravity: ToastGravity.TOP,
                          );
                          return;
                        } else {
                          // Si iDController est rempli, passer à la page suivante
                          _pageController.nextPage(
                            duration: const Duration(milliseconds: 800),
                            curve: Curves.easeInOut,
                          );
                        }
                      }
                      // Si on est sur une autre page (pages des membres)
                      else {
                        if (idCardController.text.isEmpty) {
                          // Si le champ idCardController est vide, afficher un message d'erreur
                          Functions.showToast(
                            msg:
                                'Le n° de pièce d\'identité est obligatoire pour ce membre !',
                            gravity: ToastGravity.TOP,
                          );
                          return;
                        } else {
                          // Mettre à jour le numéro de pièce d'identité du membre
                          //print(object)
                          visite.members[currentPage - 1].idCard =
                              idCardController.text;
                          visite.members[currentPage - 1].badge =
                              _membersBadgeController.text;
                          visite.members[currentPage - 1].gilet =
                              _membersGiletController.text;

                          visite.members[currentPage - 1].typePiece =
                              _membersIdCardType;

                          // Si ce n'est pas la dernière page, passer à la page suivante
                          if (currentPage < visite.members.length) {
                            _pageController.nextPage(
                              duration: const Duration(milliseconds: 800),
                              curve: Curves.easeInOut,
                            );
                          } else {
                            // Si c'est la dernière page, traiter tous les membres

                            // print(listMemberToJson(visite.members));
                            // Appeler la fonction finale de traitement des membres
                            //_processAllMembers(visite.members);
                            ////////////////////////////////////////////////////////////
                            //préparation des données pour update les tables visiteurs et scan_history
                            ///
                            ///PUT VISITE DATA
                            Map<String, dynamic> visitData = {
                              "is_already_scanned": 1,
                              "numero_cni": iDController.text,
                              /* "heure_visite": hours, */
                              "type_piece": _idCardType,
                              "numero_piece": iDController.text.toUpperCase(),
                              "membre_visites": visite.members
                                  .map((member) => member.toJson())
                                  .toList(),
                            };
                            /////////////////////////
                            ///

                            /* EasyLoading.dismiss();
                            return; */

                            ////////////
                            ///SCAN HISTORY DATA
                            Map<String, dynamic> scanHistoryData = {
                              "visite_id": visite.id,
                              "user_id": widget.agent.id,
                              "scan_date": today.toIso8601String(),
                              "scan_hour": hours,
                              "motif": "Entrée",
                              "numero_badge": _badgeController.text,
                              "numero_gilet": _giletController.text,
                              "plaque_immatriculation":
                                  cariDController.text.toUpperCase(),
                            };

                            alert(
                              ctxt: context,
                              visite: visite,
                              confirm: () async {
                                // Functions.showLoadingSheet(ctxt: context);
                                EasyLoading.show(
                                    status: 'sauvegarde en cours...');
                                await Functions.upDateVisit(
                                  data: visitData,
                                  visiteId: visite.id,
                                ).whenComplete(() async {
                                  await RemoteService()
                                      .postData(
                                          endpoint: 'scanCounters',
                                          postData: scanHistoryData)
                                      .then((res) {
                                    //visite.plaqueVehicule = cariDController.text;

                                    Future.delayed(const Duration(seconds: 2))
                                        .then(
                                      (_) {
                                        widget.visite.isAlreadyScanned = true;
                                        widget.visite.numeroCni =
                                            iDController.text;
                                        EasyLoading.dismiss();
                                        Navigator.pop(context);
                                        Navigator.pop(context);
                                        Functions.showToast(
                                          msg: 'Scan sauvegardé !',
                                          gravity: ToastGravity.TOP,
                                        );
                                      },
                                    );
                                  });
                                });
                              },
                              cancel: () => Navigator.pop(context),
                            );
                            //print(jsonEncode(visite.members));
                          }
                        }
                      }
                    },
                  ),
                )
              ],
            ),
          ],
        ),
      );
  }

  Widget _primaryVisitorInfos(
    VisiteModel visite,
    Widget idTextField,
    Widget cardIddTextField,
    Widget badgeTextField,
  ) {
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              child: InfosColumn(
                label: 'Date début',
                widget: AppText.medium(
                  DateFormat(
                    'dd MMM yyyy',
                    'fr_FR',
                  ).format(
                    visite.dateVisite,
                  ),
                ),
              ),
            ),
            Expanded(
              child: InfosColumn(
                label: 'Heure d\'entrée',
                widget: AppText.medium(
                  visite.heureVisite ?? '',
                ),
              ),
            ),
          ],
        ), //
        Row(
          children: [
            Expanded(
              child: InfosColumn(
                radius: 0,
                opacity: 0.12,
                label: 'n° de pièce',
                widget: Expanded(
                  child: idTextField,
                ),
              ),
            ),
            Expanded(
              child: InfosColumn(
                radius: 0,
                opacity: 0.12,
                label: 'type de pièce',
                widget: InkWell(
                  onTap: () => Functions.showBottomSheet(
                    ctxt: context,
                    widget: _idCardTypeSelector(),
                  ),
                  child: Row(
                    children: [
                      Expanded(
                        child: AppText.medium(_idCardType),
                      ),
                      Icon(Icons.arrow_drop_down)
                    ],
                  ),
                ),
              ),
            ),
            Expanded(
              child: InfosColumn(
                radius: 0,
                opacity: 0.12,
                label: 'n° d\'immatriculation véhicule',
                widget: Expanded(
                  child: cardIddTextField,
                ),
              ),
            ),
          ],
        ), //
        Container(
          width: double.infinity,
          height: 0.8,
          color: Palette.separatorColor,
        ),
        const SizedBox(height: 10),
        AppText.medium(
          'Accessoires de visite',
          textAlign: TextAlign.center,
        ),
        AppText.small(
          textAlign: TextAlign.center,
          'Veuillez fournir au visiteur les accessoires de visite (badge et gilet) si necessaire',
        ),
        const SizedBox(
          height: 5,
        ),
        Row(
          children: [
            Expanded(
              child: InfosColumn(
                radius: 0,
                opacity: 0.12,
                label: 'Entrer le n° du badge',
                widget: Expanded(
                  child: badgeTextField,
                ),
              ),
            ),
            const SizedBox(
              width: 5,
            ),
            Expanded(
              child: InfosColumn(
                radius: 0,
                opacity: 0.12,
                label: 'Entrer le n° du gilet',
                widget: Expanded(
                  child: Functions.getTextField(controller: _giletController),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(
          height: 40,
        ),

        ///
      ],
    );
  }

//widget retourné si la date de visite n'est pas encore atteinte
  Widget dateException({required DateTime dateDebut}) {
    return Container(
      padding: const EdgeInsets.only(top: 20, right: 20, left: 20),
      child: Center(
        child: Column(
          children: [
            AppText.medium('Date de visite !'),
            const SizedBox(
              height: 5,
            ),
            AppText.small(
              'La date de visite pour ce code est prévue pour le\n${DateFormat('EEEE dd MMMM yyyy', 'fr_FR').format(dateDebut)}',
              textAlign: TextAlign.center,
            ),
            const SizedBox(
              height: 20,
            ),
            CustomButton(
              color: Palette.primaryColor,
              width: double.infinity,
              height: 35,
              radius: 5,
              text: 'Retour',
              onPress: () => Navigator.pop(context),
            )
          ],
        ),
      ),
    );
  }

  //widget retourné si la date de visite n'est pas encore atteinte
  Widget dateExpiree({required DateTime dateFin}) {
    return Container(
      padding: const EdgeInsets.only(top: 20, right: 20, left: 20),
      child: Center(
        child: Column(
          children: [
            AppText.medium('La date de visite est passée !'),
            const SizedBox(
              height: 5,
            ),
            AppText.small(
              'Cette visite a expiré depuis le\n${DateFormat('EEEE dd MMMM yyyy', 'fr_FR').format(dateFin)}',
              textAlign: TextAlign.center,
            ),
            const SizedBox(
              height: 20,
            ),
            CustomButton(
              color: Palette.primaryColor,
              width: double.infinity,
              height: 35,
              radius: 5,
              text: 'Retour',
              onPress: () => Navigator.pop(context),
            )
          ],
        ),
      ),
    );
  }

// widget retourné si le qr code inactif
  Widget inactifQrCode() {
    return Container(
      padding: const EdgeInsets.only(top: 20, right: 20, left: 20),
      child: Column(
        children: [
          Container(
            width: 70,
            height: 70,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              image: DecorationImage(
                image: AssetImage('assets/images/disconnect.jpg'),
                fit: BoxFit.cover,
              ),
            ),
          ),
          AppText.medium('Oops !'),
          AppText.small('Cette visite n\'est pas encore active !'),
          const SizedBox(
            height: 20,
          ),
          CustomButton(
            color: Palette.primaryColor,
            width: double.infinity,
            height: 35,
            radius: 5,
            text: 'Retour',
            onPress: () => Navigator.pop(context),
          )
        ],
      ),
    );
  }

  Widget getWidget({
    required VisiteModel visite,
    required Widget idTextField,
    required Widget cardIddTextField,
    required Widget badgeTextField,
  }) {
    // Date actuelle
    DateTime today = DateTime.now();
    //String currentDay = today.weekday.toString(); // Lundi = 1, Dimanche = 7
    TimeOfDay currentHour = TimeOfDay.now(); // Heure actuelle

    // Définir les plages horaires pour les prestataires et clients
    TimeOfDay clientStartTime = TimeOfDay(hour: 6, minute: 0);
    TimeOfDay clientEndTime = TimeOfDay(hour: 22, minute: 0);
    TimeOfDay prestataireStartTime = TimeOfDay(hour: 7, minute: 0);
    TimeOfDay prestataireEndTime = TimeOfDay(hour: 18, minute: 0);
    TimeOfDay visiteurVisiteTime =
        Functions.stringToTimeOfDay(visite.heureVisite ?? "23:00");

    print(
        '$clientStartTime\n$clientEndTime\n$prestataireStartTime\n$prestataireEndTime');

    // Formatage de la date début et fin du QR code
    DateTime dateDebut = DateTime(
      visite.dateVisite.year,
      visite.dateVisite.month,
      visite.dateVisite.day,
    );

    ////////////////////////////////////////
    /// 3. Si la date de visite est passée
    ////////////////////////////////////////
    /// 3. si la date visite est passée
    if (visite.dateFinVisite != null) {
      DateTime dateFin = DateTime(
        visite.dateFinVisite!.year,
        visite.dateFinVisite!.month,
        visite.dateFinVisite!.day,
      );
      if (dateFin.isBefore(Functions.getToday())) {
        return dateExpiree(dateFin: dateFin);
      }
    }

    if (visite.typeVisiteur.toLowerCase() == "visiteur" &&
        dateDebut.isBefore(Functions.getToday())) {
      ////////////////////////////////////////
      ///les visiteurs ont une date visite a validité unique
      /// 1. Si  la date viste est passée

      return dateExpiree(dateFin: dateDebut);
    }

    ////////////////////////////////////////
    /// 1. Si la date de visite n'est pas encore arrivée
    if (dateDebut.isAfter(Functions.getToday())) {
      return dateException(dateDebut: dateDebut);
    }

    ////////////////////////////////////////
    /// 4. Vérification des jours et heures d'accès pour les prestataires et clients
    if (visite.typeVisiteur.toLowerCase() == "client") {
      // Vérifier si c'est un jour de la semaine (lundi à vendredi)
      if (today.weekday < 6) {
        // Vérifier les heures d'accès pour le client
        if (currentHour.hour >= clientStartTime.hour &&
            currentHour.hour <= clientEndTime.hour) {
          return checkQrCodeStatus(
              visite, idTextField, cardIddTextField, badgeTextField);
        } else {
          //String date = DateFormat('EEEE dd yyyy', 'fr').format(visite.dateVisite);
          return outsideAccessHours(
              text:
                  'Cette visite est autorisée uniquement du lundi au vendredi  entre ${clientStartTime.format(context)} et ${clientEndTime.format(context)}');
        }
      } else {
        //String date = DateFormat('EEEE dd yyyy', 'fr').format(visite.dateVisite);
        return outsideAccessHours(
            text:
                'Cette visite est autorisée uniquement du lundi au vendredi  entre ${clientStartTime.format(context)} et ${clientEndTime.format(context)}'); // Week-end
      }
    } else if (visite.typeVisiteur.toLowerCase() == "prestataire") {
      //print('-------------------------> type is true');
      // Vérifier si c'est un jour de la semaine (lundi à vendredi)
      if (today.weekday < 6) {
        // print('-------------------------> day is true');
        // Vérifier les heures d'accès pour le prestataire
        if (currentHour.hour >= prestataireStartTime.hour &&
            currentHour.hour <= prestataireEndTime.hour) {
          // print('-------------------------> hours is true');
          return checkQrCodeStatus(
              visite, idTextField, cardIddTextField, badgeTextField);
        } else {
          // String date = DateFormat('EEEE dd yyyy', 'fr').format(visite.dateVisite);
          return outsideAccessHours(
              text:
                  'Cette visite est autorisée uniquement du lundi au vendredi  entre ${prestataireStartTime.format(context)} et ${prestataireEndTime.format(context)}');
        }
      } else {
        return outsideAccessHours(
            text:
                'Cette visite est autorisée uniquement du lundi au vendredi  entre ${prestataireStartTime.format(context)} et ${prestataireEndTime.format(context)}'); // Week-end
      }
    } else if (visite.typeVisiteur.toLowerCase() == "visiteur") {
      print("----------------------> is visiteur type");
      print(visiteurVisiteTime);
      if (currentHour.hour >= visiteurVisiteTime.hour) {
        return checkQrCodeStatus(
            visite, idTextField, cardIddTextField, badgeTextField);
      } else {
        String date =
            DateFormat('EEEE dd yyyy', 'fr').format(visite.dateVisite);
        return outsideAccessHours(
            text:
                'Cette visite est autorisée uniquement pour le $date à partir de ${visiteurVisiteTime.format(context)}');
      }
    }

    ////////////////////////////////////////
    /// Si le QR code n'est pas actif
    return inactifQrCode();
  }

  Widget checkQrCodeStatus(VisiteModel visite, Widget idTextField,
      Widget cardIddTextField, Widget badgeTextField) {
    if (visite.isActive) {
      if (!visite.isAlreadyScanned) {
        return firstScanWidget(
          idTextField: idTextField,
          cardIddTextField: cardIddTextField,
          visite: visite,
          badgeTextField: badgeTextField,
        );
      } else {
        return isAlreadyScanWidget(visite: visite);
      }
    } else {
      return inactifQrCode();
    }
  }

  Widget outsideAccessHours({required String text}) {
    return Column(
      children: [
        Container(
          width: 200,
          height: 200,
          padding: const EdgeInsets.symmetric(horizontal: 25),
          child: Image.asset('assets/images/timer2.webp'),
        ),
        AppText.large('Oops !'),
        Text(
          'Accès non autorisé en dehors des horaires.\n----\n$text',
          textAlign: TextAlign.center,
        ),
        const SizedBox(
          height: 25,
        ),
        CustomButton(
          color: Palette.primaryColor,
          width: double.infinity,
          height: 35,
          radius: 5,
          text: 'Retour',
          onPress: () => Navigator.pop(context),
        ),
      ],
    );
  }

  /////////////////::
  ///
  ///
  TextField getTextfiel({
    required TextEditingController controller,
    //required String hintext,
  }) {
    return TextField(
      controller: controller,
      style: const TextStyle(
        color: Colors.black,
        fontSize: 14,
        fontWeight: FontWeight.w600,
      ),
      cursorColor: Colors.black,
      decoration: InputDecoration(
        //label: AppText.medium(hintext),
        border: InputBorder.none,
      ),
    );
  }

  Container _idCardTypeSelector() {
    List<String> _pieces = [
      "CNI",
      "Permis",
      "Passeport",
      "Attestation",
    ];
    return Container(
      width: double.infinity,
      height: MediaQuery.of(context).size.height * 0.35,
      decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(5),
            topRight: Radius.circular(5),
          )),
      child: Column(
        children: [
          AllSheetHeader(
            opacity: 0,
          ),
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: _pieces.map((piece) {
                  return InkWell(
                    onTap: () {
                      setState(() {
                        _idCardType = piece;
                      });
                      Navigator.pop(context);
                    },
                    child: Container(
                      width: double.infinity,
                      height: 40,
                      margin: const EdgeInsets.symmetric(horizontal: 10),
                      padding: const EdgeInsets.only(left: 10),
                      alignment: Alignment.centerLeft,
                      decoration: BoxDecoration(
                        /*  color: piece == _idCardType
                            ? Palette.primaryColor
                            : Colors.white, */
                        border: Border(
                          left: BorderSide(
                            width: 3,
                            color: piece == _idCardType
                                ? Palette.primaryColor
                                : Colors.white,
                          ),
                        ),
                      ),
                      child: AppText.medium(
                        piece.toUpperCase(),
                        textAlign: TextAlign.left,
                      ),
                    ),
                  );
                }).toList(),
              ),
            ),
          )
        ],
      ),
    );
  }

  Container _membersIdCardTypeSelector() {
    List<String> _pieces = [
      "CNI",
      "Permis",
      "Passeport",
      "Attestation",
    ];
    return Container(
      width: double.infinity,
      height: MediaQuery.of(context).size.height * 0.35,
      decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(5),
            topRight: Radius.circular(5),
          )),
      child: Column(
        children: [
          AllSheetHeader(
            opacity: 0,
          ),
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: _pieces.map((piece) {
                  return InkWell(
                    onTap: () {
                      setState(() {
                        _membersIdCardType = piece;
                      });
                      Navigator.pop(context);
                    },
                    child: Container(
                      width: double.infinity,
                      height: 40,
                      margin: const EdgeInsets.symmetric(horizontal: 10),
                      padding: const EdgeInsets.only(left: 10),
                      alignment: Alignment.centerLeft,
                      decoration: BoxDecoration(
                        /*  color: piece == _idCardType
                            ? Palette.primaryColor
                            : Colors.white, */
                        border: Border(
                          left: BorderSide(
                            width: 3,
                            color: piece == _membersIdCardType
                                ? Palette.primaryColor
                                : Colors.white,
                          ),
                        ),
                      ),
                      child: AppText.medium(
                        piece.toUpperCase(),
                        textAlign: TextAlign.left,
                      ),
                    ),
                  );
                }).toList(),
              ),
            ),
          )
        ],
      ),
    );
  }
}
